@inherits UmbracoViewPage<SiteBuilderBlock>
@using USNSiteBuilder.Core.Models
@using USNSiteBuilder.Core.Extensions
@using USNSiteBuilder.Core.Interfaces
@using Microsoft.Extensions.Options
@inject ISiteBuilderService _siteBuilderService
@inject IOptions<USNAppSettings> _appSettings
@{
    // Available as Pod Block type only

    var content = (Usn_Pb_Video)Model.BlockContent;

    //Settings taken from compositions common to all pod block types
    var uniqueSettings = (IUsn_Cmp_Video_Settings)Model.BlockSettings;
    var animateSettings = (IUsn_Cmp_AnimateSettings)Model.BlockSettings;

    //Headings and secondary headings only present on pods
    var podContent = Model.BlockContent as Usn_Pb_Video;

    string uniqueId = ViewData["uniqueId"].ToString();
    string backgroundColorLabel = ViewData["backgroundColorLabel"].ToString();

    //Clear view data before calling next partial
    ViewData.Clear();

    AnimationSettings animation = _siteBuilderService.GetAnimationSettings(animateSettings.Animate, animateSettings.AnimationDelay, animateSettings.AnimationDuration, animateSettings.AnimationStyle);

    ImageSettings imageSettings = _siteBuilderService.GetImageSettings(uniqueSettings.ImageStyle, uniqueSettings.BoxPad);

    string lightWindow = String.Empty;
    string title = String.Empty;
    string footer = String.Empty;
    string smallImage = String.Empty;
    string displayImageX1 = String.Empty;
    string displayImageX2 = String.Empty;
    string alternativeText = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.Value<string>("alternativeText") : Umbraco.GetDictionaryValue("USN Blank Image");
    bool isSVG = content.GalleryImageThumbnail != null ? (content.GalleryImageThumbnail.Value<string>("umbracoExtension") == "svg" ? true : false) : false;
    bool webPEnabled = _appSettings.Value.WebPEnabled;

    if (!content.DisableLightWindow)
    {
        lightWindow = " data-toggle=\"lightbox\" data-type=\"image\" data-gallery=\"galleryname-" + uniqueId + "\"";

        if (content.LightWindowTitle.HasValue())
        {
            title = "data-title=\"" + content.LightWindowTitle + "\"";
        }

        if (content.LightWindowFooter.HasValue())
        {
            footer = "data-footer=\"" + content.LightWindowFooter + "\"";
        }
    }
    else
    {
        imageSettings.CircleClass = String.Empty;
    }

    if (!isSVG && uniqueSettings.BoxPad)
    {
        smallImage = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.Url() + "?width=" + (imageSettings.Width / 10) + "&height=" + (imageSettings.Height / 10) + "&mode=boxpad" : "/images/uSkinned/clear.gif?" + "width=" + (imageSettings.Width / 10) + "&height=" + (imageSettings.Height / 10) + "&mode=boxpad";
        displayImageX1 = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.Url() + "?width=" + (imageSettings.Width / 2) + "&height=" + (imageSettings.Height / 2) + "&mode=boxpad" : "/images/clear.gif?width =" + (imageSettings.Width / 2) + "&height=" + (imageSettings.Height / 2) + "&mode=boxpad";
        displayImageX2 = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.Url() + "?width=" + (imageSettings.Width) + "&height=" + (imageSettings.Height) + "&mode=boxpad" : "/images/clear.gif?width =" + (imageSettings.Width) + "&height=" + (imageSettings.Height) + "&mode=boxpad";
    }
    else if (!isSVG && !uniqueSettings.BoxPad)
    {
        smallImage = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.GetCropUrl(cropAlias: imageSettings.CropAlias, width: (imageSettings.Width / 10), height: (imageSettings.Height / 10)) : "/images/uSkinned/clear.gif?width=" + (imageSettings.Width / 10) + "&height=" + (imageSettings.Height / 10);
        displayImageX1 = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.GetCropUrl(cropAlias: imageSettings.CropAlias, width: (imageSettings.Width / 2), height: (imageSettings.Height / 2)) : "/images/clear.gif?width=" + (imageSettings.Width / 2) + "&height=" + (imageSettings.Height / 2);
        displayImageX2 = content.GalleryImageThumbnail != null ? content.GalleryImageThumbnail.GetCropUrl(cropAlias: imageSettings.CropAlias, width: imageSettings.Width, height: imageSettings.Height) : "/images/clear.gif?width=" + imageSettings.Width + "&height=" + imageSettings.Height;
    }

    @await Html.PartialAsync(Model.BaseModel.ThemeFolder + "/MiscPageElements/Headings", new ViewDataDictionary(ViewData) { { "headingOrder", ((Usnstyle)Model.BaseModel.WebsiteStyle).StyleLayout.headingOrder }, { "animation", animation }, { "heading", podContent != null ? podContent.Heading : null }, { "secondaryHeading", podContent != null ? podContent.SecondaryHeading : null }, { "backgroundColorLabel", backgroundColorLabel } })

    if (content.VideoSource.HasValue() && (content.VideoSource == "youtube" || content.VideoSource == "vimeo") && content.Video3rdParty.HasValue())
    {
        SiteBuilderVideo video = _siteBuilderService.GetVideo(content.Video3rdParty);

        if (content.DisableLightWindow && video.VideoID != String.Empty)
        {
            string videoSrc = String.Empty;
            string videoVendor = String.Empty;

            if (content.VideoSource == "youtube")
            {
                videoSrc = "https://www.youtube.com/watch?v=" + video.VideoID;
                videoVendor = "youtube";
            }
            else
            {
                videoSrc = "https://vimeo.com/" + video.VideoID;
                videoVendor = "vimeo";
            }

            <div class="image @imageSettings.CircleClass video lazyframe lazyframe-video @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration"
                 data-vendor="@videoVendor" data-src="@videoSrc" data-ratio="16:9">
                @if (isSVG)
                {
                    <img src="@content.GalleryImageThumbnail.Url()" alt="@alternativeText">
                }
                else
                {
                    <picture>
                        @if (webPEnabled)
                        {
                            <source type="image/webp" data-srcset="@(displayImageX1)&format=webp 1x, @(displayImageX2)&format=webp 2x">
                        }
                        <img class="@imageSettings.CircleClass lazyload" src="@smallImage" width="@imageSettings.Width" height="@imageSettings.Height" data-srcset="@displayImageX1 1x, @displayImageX2 2x" alt="@alternativeText">
                    </picture>
                }
                @if (content.VideoCaption.HasValue())
                {
                    <div class="caption">@Html.Raw(content.VideoCaption)</div>
                }
            </div>
        }
        else
        {
            <a href="@video.VideoURLModified" @Html.Raw(title) @Html.Raw(footer) data-toggle="lightbox" @Html.Raw(video.VideoDataRemote) data-gallery="galleryname-@uniqueId" data-width="1350">

                <div class="image @imageSettings.CircleClass video @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">

                    @if (isSVG)
                    {
                        <img src="@content.GalleryImageThumbnail.Url()" alt="@alternativeText">
                    }
                    else
                    {
                        <picture>
                            @if (webPEnabled)
                            {
                                <source type="image/webp" data-srcset="@(displayImageX1)&format=webp 1x, @(displayImageX2)&format=webp 2x">
                            }
                            <img class="@imageSettings.CircleClass lazyload" src="@smallImage" width="@imageSettings.Width" height="@imageSettings.Height" data-srcset="@displayImageX1 1x, @displayImageX2 2x" alt="@alternativeText">
                        </picture>
                    }
                    <div class="overlayicon">
                        <i class="icon usn_ion-md-play"></i>
                    </div>
                    @if (content.VideoCaption.HasValue())
                    {
                        <div class="caption">@Html.Raw(content.VideoCaption)</div>
                    }
                </div>
            </a>
        }
    }

    else if (content.VideoSource.HasValue() && content.VideoSource == "mp4" && content.VideoMp4.HasValue())
    {

        if (content.DisableLightWindow)
        {
            <div class="image @imageSettings.CircleClass video embed-responsive embed-responsive-16by9 @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">
                <video class="embed-responsive-item" controls>
                    <source src="@(content.VideoMp4.Url())" type="video/mp4">
                </video>
                @if (content.VideoCaption.HasValue())
                {
                    <div class="caption">@Html.Raw(content.VideoCaption)</div>
                }
            </div>
        }
        else
        {
            <a href="@(content.VideoMp4.Url())" data-type="video" @Html.Raw(title) @Html.Raw(footer) data-toggle="lightbox" data-gallery="galleryname-@uniqueId" data-width="1350" data-height="750" class="@animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">

                <div class="image @imageSettings.CircleClass video">
                    @if (isSVG)
                    {
                        <img src="@content.GalleryImageThumbnail.Url()" alt="@alternativeText">
                    }
                    else
                    {
                        <picture>
                            @if (webPEnabled)
                            {
                                <source type="image/webp" data-srcset="@(displayImageX1)&format=webp 1x, @(displayImageX2)&format=webp 2x">
                            }
                            <img class="@imageSettings.CircleClass lazyload" src="@smallImage" width="@imageSettings.Width" height="@imageSettings.Height" data-srcset="@displayImageX1 1x, @displayImageX2 2x" alt="@alternativeText">
                        </picture>
                    }
                    <div class="overlayicon">
                        <i class="icon usn_ion-md-play"></i>
                    </div>
                    @if (content.VideoCaption.HasValue())
                    {
                        <div class="caption">@Html.Raw(content.VideoCaption)</div>
                    }
                </div>

            </a>
        }
    }
}